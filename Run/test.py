import sysfrom docx import Documentimport loggingimport PortSerialimport timeimport xml.etree.ElementTree as ETfrom docx.shared import RGBColorlogging.basicConfig(format=u'%(levelname)-8s [%(asctime)s] %(message)s', level=logging.DEBUG, filename=u'mylog.log')class Reprot:    def report(self):        path_report = str(sys.argv[1])        port = str(sys.argv[2])        setup_id = str(sys.argv[3])        test_name = str(sys.argv[4])        tree = ET.parse(path_report + "\\test" + setup_id + ".xml")        root = tree.getroot()        count = 1        items = ((0, '', '', ""),)        if root.get('SetupId') == setup_id:  # Identification that test match to the setup            for root_group in root:                if root_group.get("TestId") == test_name:  # Match the test into the setup                    for test_root in root_group:                        step = test_root.get('Name')                        expect = test_root.get('Expect')                        result = test_root.text                        items = items + ((count, step, expect, result),)                        count += 1        '''        items = (            (1, 'Save the parameters', 'The parameters should be saved successfully', "Pass"),            (2, 'Enable the system setup', 'The system setup should be enabled', "Pass"),            (3, 'Disable the setup', 'The setup should be disabled successfully', "Fail"),        )        '''        document = Document()        document.add_heading("Report for Test: " + test_name, 0)        p = document.add_paragraph('System information: \n')        PortSerial.port("\\1", port, 1)        time.sleep(1)        p.add_run("Axis info #1:").bold = True        p.add_run(PortSerial.port("info", port, 0)).bold = True        table = document.add_table(rows=1, cols=4)        table.style = 'Light Grid Accent 1'        hdr_cells = table.rows[0].cells        hdr_cells[0].text = 'Step Id'        hdr_cells[1].text = 'Step Description'        hdr_cells[2].text = 'Expected Result'        hdr_cells[3].text = 'Results'        for id, step, des, res in items:            row_cells = table.add_row().cells            row_cells[0].text = str(id)            row_cells[1].text = str(step)            row_cells[2].text = des            row_cells[3].text = res        document.add_page_break()        document.save(path_report + "\\Report_Setup" + setup_id + "_test_" + test_name + ".docx")def main():    # print command line arguments    return Reprot.report(sys.argv)if __name__ == "__main__":    main()